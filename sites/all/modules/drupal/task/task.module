<?php

define('TASK_ASSIGNEE_FIELD', 'task_assignee');

/**
 * Implements hook_entity_info().
 */
function task_entity_info() {
  $includes = drupal_get_path('module', 'task') . '/includes';
  $return = array(
    'task' => array(
      'label' => t('Task'),
      'entity class' => 'Task',
      'controller class' => 'TaskController',
      'base table' => 'task',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'tid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'task_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'task',
      'access callback' => 'task_access',
    ),
  );
  $return['task_type'] = array(
    'label' => t('Task Type'),
    'entity class' => 'TaskType',
    'controller class' => 'TaskTypeController',
    'base table' => 'task_type',
    'fieldable' => FALSE,
    'bundle of' => 'task',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'task',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/task-types',
      'file' => 'task.admin.inc',
      'controller class' => 'TaskTypeUIController',
      'file path' => $includes,
    ),
    'access callback' => 'task_type_access',
  );
  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function task_entity_info_alter(&$entity_info) {
  foreach (task_types() as $type => $info) {
    $entity_info['task']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/task-types/manage/%task_type',
        'real path' => 'admin/structure/task-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function task_menu() {
  $includes = drupal_get_path('module', 'task') . '/includes';
  $items = array();

  $items['task/add'] = array(
    'title' => 'Add task',
    'page callback' => 'task_admin_add_page',
    'access arguments' => array('administer task entities'),
    'file' => 'task.admin.inc',
    'file path' => $includes,
  );

  $task_uri = 'task/%task';
  $task_uri_argument_position = 1;

  $items[$task_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('task', $task_uri_argument_position),
    'page callback' => 'task_view',
    'page arguments' => array($task_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'task', $task_uri_argument_position),
    'file' => 'task.pages.inc',
    'file path' => $includes,
  );

  $items[$task_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$task_uri . '/delete'] = array(
    'title' => 'Delete task',
    'title callback' => 'task_label',
    'title arguments' => array($task_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('task_delete_form', $task_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'task', $task_uri_argument_position),
    'file' => 'task.admin.inc',
    'file path' => $includes,
  );

  $items[$task_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('task_form', $task_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'task', $task_uri_argument_position),
    'file' => 'task.admin.inc',
    'file path' => $includes,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  foreach (task_types() as $type => $info) {
    $items['task/add/' . $type] = array(
      'title' => $info->label,
      'page callback' => 'task_add',
      'page arguments' => array(2),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'task', $type),
      'file' => 'task.admin.inc',
      'file path' => $includes,
    );
  }

  $items['admin/structure/task-types/%task_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('task_type_form_delete_confirm', 4),
    'access arguments' => array('administer task types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'task.admin.inc',
    'file path' => $includes,
  );

  $items['user/%user/tasks'] = array(
    'title' => 'Tasks',
    'page callback' => 'task_user_overview',
    'page arguments' => array(1),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'task', $task_uri_argument_position),
    'type' => MENU_LOCAL_TASK,
    'file' => 'task.pages.inc',
    'file path' => $includes,
  );

  $items['user/%user/tasks/completed'] = array(
    'title' => 'Completed',
    'page callback' => 'task_user_overview',
    'page arguments' => array(1),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'task', $task_uri_argument_position),
    'type' => MENU_LOCAL_TASK,
    'file' => 'task.pages.inc',
    'file path' => $includes,
  );

  $items['user/%user/tasks/assigned'] = array(
    'title' => 'Assigned',
    'page callback' => 'task_user_overview',
    'page arguments' => array(1),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'task', $task_uri_argument_position),
    'type' => MENU_LOCAL_TASK,
    'file' => 'task.pages.inc',
    'file path' => $includes,
  );

  $items['task/ajax/complete/%ctools_js/%task'] = array(
    'title' => 'Complete',
    'page callback' => 'task_ajax_request_complete_task',
    'page arguments' => array(3, 4),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'task', 4),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 *  Nix a row from a table and restripe.
 */
function task_ajax_request_complete_task($js, $task) {

  if (!empty($task->completed)) {
    $task->completed = 0;
  }
  else {
    $task->completed = 1;
  }

  task_save($task);

  if ($js) {
    ctools_include('ajax');

    $tid = $task->tid;

    $commands = array();
    $commands[] = ajax_command_remove("tr.task-row-$tid");
    $commands[] = ajax_command_restripe("table.view-display-id-user_tasks");
    print ajax_render($commands);
    exit;
  }
  else {
    // @TODO Make sure it works without JavaScript.
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function task_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'node/add' on 'admin/content' page.
  if ($root_path == 'admin/content/tasks') {
    $item = menu_get_item('task/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function task_permission() {
  $permissions = array(
    'administer task types' => array(
      'title' => t('Administer task types'),
      'description' => t('Allows users to configure task types and their fields.'),
      'restrict access' => TRUE,
    ),
    'administer task entities' => array(
      'title' => t('Administer task'),
      'description' => t('Allows users to administer all tasks.'),
      'restrict access' => TRUE,
    ),
    'create task entities' => array(
      'title' => t('Create tasks'),
      'description' => t('Allows users to create tasks.'),
    ),
    'view own task entities' => array(
      'title' => t('View own tasks'),
      'description' => t('Allows users to view own tasks.'),
    ),
    'view any task entities' => array(
      'title' => t('View any tasks'),
      'description' => t('Allows users to view any tasks.'),
    ),
    'edit any task entities' => array(
      'title' => t('Edit any tasks'),
      'description' => t('Allows users to edit any tasks.'),
    ),
    'edit own task entities' => array(
      'title' => t('Edit own tasks'),
      'description' => t('Allows users to edit own tasks.'),
    ),
    'edit assigned task entities' => array(
      'title' => t('Edit assigned tasks'),
      'description' => t('Allows users to edit and view assigned tasks.'),
    ),
    'delete assigned task entities' => array(
      'title' => t('Delete assigned tasks'),
      'description' => t('Allows users to delete assigned tasks.'),
    ),
    'delete own task entities' => array(
      'title' => t('Delete own tasks'),
      'description' => t('Allows users to delete own tasks.'),
    ),
    'delete any task entities' => array(
      'title' => t('Delete any tasks'),
      'description' => t('Allows users to delete all tasks.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_field_extra_fields().
 */
function task_field_extra_fields() {
  $extra = array();

  foreach (task_types() as $type) {
    $extra['task'][$type->type] = array(
      'form' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('Task module element'),
          'weight' => -5,
        ),
        'description' => array(
          'label' => t('Description'),
          'description' => t('Task module element'),
          'weight' => 0,
        ),
        'completed' => array(
          'label' => t('Completed'),
          'description' => t('Task module element'),
          'weight' => 5,
        ),
      ),
      'display' => array(
        'description' => array(
          'label' => t('Description'),
          'description' => t('Task module element'),
          'weight' => 0,
        ),
        'completed' => array(
          'label' => t('Completed'),
          'description' => t('Task module element'),
          'weight' => 5,
        ),
      ),
    );
  }
  return $extra;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function task_entity_property_info_alter(&$info) {
  $properties = &$info['task']['properties'];

  $properties['completed'] = array(
    'label' => t("Completed"),
    'type' => 'boolean',
    'description' => t("Whether the task has been completed"),
    'getter callback' => 'task_entity_metadata_task_get_properties',
    'schema field' => 'completed',
  );
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the node was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer nodes',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the task."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer task entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
  $properties['edit_url'] = array(
    'label' => t("Edit URL"),
    'description' => t("The URL of the task's edit page."),
    'getter callback' => 'task_entity_metadata_task_get_properties',
    'type' => 'uri',
  );
}

/**
 * Callback for getting node properties.
 *
 * @see entity_metadata_node_entity_info_alter()
 */
function task_entity_metadata_task_get_properties($task, array $options, $name, $entity_type) {
  switch ($name) {
    case 'completed':
      return empty($task->completed);

    case 'edit_url':
      return url('task/' . $task->tid . '/edit', $options);
  }
}

/**
 * Access callback for task.
 */
function task_access($op, $task, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer task entities', $account)
          || user_access('create task entities', $account);
    case 'view':
      return user_access('administer task entities', $account)
          || user_access('view any task entities', $account)
          || (user_access('view own task entities', $account) && ($task->uid == $account->uid));
    case 'edit':
      return user_access('administer task entities')
          || user_access('edit any task entities')
          || (user_access('edit own task entities') && ($task->uid == $account->uid));
    case 'delete':
      return user_access('administer task entities')
      || user_access('delete any task entities')
      || (user_access('delete own task entities') && ($task->uid == $account->uid))
      || (user_access('delete assigned task entities') && ($task->uid == $account->uid));
  }
}

/**
 * Returns an initialized task object.
 */
function task_new($type) {
  return entity_create('task', array('type' => $type));
}

/**
 * Load a task.
 */
function task_load($tid, $reset = FALSE) {
  $tasks = task_load_multiple(array($tid), array(), $reset);
  return reset($tasks);
}

/**
 * Load multiple tasks based on certain conditions.
 */
function task_load_multiple($tids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('task', $tids, $conditions, $reset);
}

/**
 * Save task.
 */
function task_save(Task $task) {
  entity_save('task', $task);
}

/**
 * Delete single task.
 */
function task_delete(Task $task) {
  entity_delete('task', entity_id('task', $task));
}

/**
 * Delete multiple tasks.
 */
function task_delete_multiple($task_ids) {
  entity_delete_multiple('task', $task_ids);
}

/**
 * Access callback for task Type.
 */
function task_type_access($op, $entity = NULL) {
  return user_access('administer task types');
}

/**
 * Load task Type.
 */
function task_type_load($task_type) {
  return task_types($task_type);
}

/**
 * List of task Types.
 */
function task_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('task_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Returns an initialized task type object.
 */
function task_type_new() {
  return entity_create('task_type', array());
}

/**
 * Save task type entity.
 */
function task_type_save(TaskType $task_type) {
  // Attach assignee field if task type is new.
  if (!empty($task_type->is_new)) {
    task_add_assignee_field($task_type);
  }
  entity_save('task_type', $task_type);
}

/**
 * Delete single task type.
 */
function task_type_delete(TaskType $task_type) {
  entity_delete('task_type', entity_id('task_type', $task_type));
}

/**
 * Delete multiple task types.
 */
function task_type_delete_multiple($task_type_ids) {
  entity_delete_multiple('task_type', $task_type_ids);
}

function task_add_assignee_field(TaskType $type) {

  $field = field_info_field(TASK_ASSIGNEE_FIELD);
  $instance = field_info_instance('task', TASK_ASSIGNEE_FIELD, $type->type);

  if (empty($field)) {
    $field = array(
      'field_name' => TASK_ASSIGNEE_FIELD,
      'type' => 'entityreference',
      'entity_types' => array('task'),
      'settings' => array(
        'target_type' => 'user',
        'handler' => 'base',
        'handler_settings' => array(),
      ),
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => TASK_ASSIGNEE_FIELD,
      'entity_type' => 'task',
      'bundle' => $type->type,
      'label' => 'Assignee',
      'widget' => array('type' => 'entityreference_autocomplete', 'weight' => 50),
      'settings' => array(),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'entityreference_label',
        ),
      ),
    );
    $instance = field_create_instance($instance);
  }
  return $instance;
}

/**
 * Implementation of hook_views_api().
 */
function task_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'task') . '/includes/views',
  );
}

function task_quick_create_task_form($form, &$form_state) {
  $form['quick'] = array('#type' => 'container', '#attributes' => array('class' => array('container-inline')));

  $form['quick']['task'] = array(
    '#type' => 'textfield',
    '#size' => 30,
  );

  $form['quick']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create task'),
  );

  return $form;
}

function task_quick_create_task_form_submit($form, &$form_state) {
  $added_task = $form_state['values']['task'];

  if (!empty($added_task)) {
    $task = entity_create('task', array('type' => 'task'));
    $task->title = $added_task;
    task_save($task);

    drupal_set_message(t('!title has been added.', array('!title' => $task->title)));
  }
}
